<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.16  |
    |              on 2025-06-22 09:38:12              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
 namespace DagaSmart\BizAdmin\Models; use Illuminate\Support\Str; use Illuminate\Database\Eloquent\Casts\Attribute; use Illuminate\Database\Eloquent\Concerns\HasTimestamps; class AdminRelationship extends BaseModel { use HasTimestamps; protected $casts = ["\x61\x72\x67\x73" => "\x6a\x73\157\156", "\145\x78\x74\162\x61" => "\152\x73\157\156"]; const TYPE_HAS_ONE = "\110\x41\123\x5f\x4f\116\x45"; const TYPE_HAS_MANY = "\110\x41\123\137\115\x41\116\131"; const TYPE_BELONGS_TO = "\102\105\x4c\117\116\x47\123\x5f\x54\117"; const TYPE_BELONGS_TO_MANY = "\x42\105\x4c\117\116\x47\123\x5f\124\x4f\x5f\115\101\116\131"; const TYPE_HAS_ONE_THROUGH = "\110\101\123\137\x4f\116\105\137\x54\x48\x52\x4f\x55\x47\110"; const TYPE_HAS_MANY_THROUGH = "\110\x41\123\x5f\x4d\x41\x4e\131\137\x54\110\122\117\x55\107\x48"; const TYPE_MORPH_ONE = "\x4d\117\122\120\110\x5f\117\x4e\x45"; const TYPE_MORPH_MANY = "\x4d\x4f\122\120\x48\x5f\115\x41\116\x59"; const TYPE_MORPH_TO_MANY = "\115\117\122\x50\x48\x5f\124\117\137\x4d\x41\116\131"; const TYPE_MAP = [self::TYPE_HAS_ONE => "\x68\141\x73\x4f\x6e\145", self::TYPE_HAS_MANY => "\150\141\x73\x4d\141\x6e\171", self::TYPE_BELONGS_TO => "\x62\145\x6c\x6f\x6e\x67\163\124\x6f", self::TYPE_BELONGS_TO_MANY => "\x62\145\154\157\156\147\163\124\157\115\x61\156\171", self::TYPE_HAS_ONE_THROUGH => "\150\x61\x73\x4f\156\x65\124\x68\162\x6f\x75\147\150", self::TYPE_HAS_MANY_THROUGH => "\x68\x61\x73\115\x61\x6e\171\124\x68\x72\157\165\x67\150", self::TYPE_MORPH_ONE => "\x6d\157\162\160\x68\x4f\x6e\145", self::TYPE_MORPH_MANY => "\155\x6f\162\x70\x68\115\141\x6e\x79", self::TYPE_MORPH_TO_MANY => "\x6d\x6f\x72\160\x68\x54\x6f\x4d\x61\x6e\171"]; const TYPE_LABEL_MAP = [self::TYPE_HAS_ONE => "\xe4\xb8\200\xe5\xaf\xb9\xe4\270\x80", self::TYPE_HAS_MANY => "\xe4\270\200\345\257\xb9\xe5\244\232", self::TYPE_BELONGS_TO => "\344\xb8\x80\xe5\257\xb9\345\xa4\232\50\345\217\x8d\345\x90\221\x29\57\345\xb1\x9e\xe4\xba\216", self::TYPE_BELONGS_TO_MANY => "\345\xa4\232\345\xaf\xb9\345\xa4\x9a", self::TYPE_HAS_ONE_THROUGH => "\xe8\xbf\x9c\xe7\250\x8b\xe4\270\200\xe5\257\xb9\xe4\270\200", self::TYPE_HAS_MANY_THROUGH => "\xe8\xbf\234\347\xa8\x8b\344\xb8\200\xe5\xaf\xb9\345\xa4\232", self::TYPE_MORPH_ONE => "\344\270\x80\345\257\271\344\270\x80\x28\xe5\244\x9a\346\x80\x81\51", self::TYPE_MORPH_MANY => "\xe4\270\x80\345\xaf\271\xe5\244\232\x28\xe5\244\232\346\200\x81\51", self::TYPE_MORPH_TO_MANY => "\xe5\xa4\232\xe5\xaf\xb9\xe5\xa4\x9a\x28\xe5\244\x9a\xe6\200\x81\x29"]; public static function typeOptions() { return collect(self::TYPE_MAP)->map(function ($dr0sI, $VQjiV) { return ["\154\141\x62\x65\x6c" => config("\x61\160\160\x2e\x6c\x6f\x63\141\x6c\x65") == "\172\x68\137\x43\116" ? self::TYPE_LABEL_MAP[$VQjiV] : self::TYPE_MAP[$VQjiV], "\x6d\145\x74\150\157\x64" => $dr0sI, "\x76\141\154\165\x65" => $VQjiV]; })->values(); } public function method() : Attribute { return Attribute::get(fn() => self::TYPE_MAP[$this->type]); } public function buildArgs() { goto hovGj; hovGj: if (class_exists($this->model)) { goto d5kET; } goto lArX7; MdVBs: $rCuDs = new \ReflectionClass($this->model); goto VmgPX; VmgPX: $I6UWy = $rCuDs->getMethod($this->method)->getParameters(); goto YhKaz; c2YrF: return $JzDEm; goto MIKIy; wexZF: XxuUO: goto c2YrF; lArX7: return []; goto Lp26a; YhKaz: $JzDEm = []; goto BpdYC; Lp26a: d5kET: goto MdVBs; BpdYC: foreach ($I6UWy as $dr0sI) { goto hQN7E; Z4WtY: uLiTm: goto Wr5y6; hQN7E: $jdTd3 = data_get($this->args, $dr0sI->getName()); goto Awma0; Awma0: $JzDEm[] = ["\156\141\155\145" => $dr0sI->getName(), "\166\141\154\x75\x65" => filled($jdTd3) ? $jdTd3 : $dr0sI->getDefaultValue()]; goto Z4WtY; Wr5y6: } goto wexZF; MIKIy: } public function getPreviewCode() { goto RL6Mr; RL6Mr: $ubt9v = Str::of($this->model)->explode("\134")->pop(); goto dlMmf; dlMmf: $JzDEm = collect($this->buildArgs())->pluck("\x76\x61\x6c\x75\x65")->map(fn($dr0sI) => is_null($dr0sI) ? "\x6e\165\x6c\x6c" : (is_string($dr0sI) ? "\47{$dr0sI}\x27" : $dr0sI))->implode("\x2c\40"); goto CVgAX; CVgAX: return "\x3c\77\160\150\x70\15\12\xd\12\x63\154\141\163\x73\x20{$ubt9v}\x20\x65\170\x74\145\156\x64\x73\x20\x4d\157\x64\145\154\15\12\x7b\xd\xa\x20\40\x20\x20\160\165\142\x6c\151\x63\x20\146\165\x6e\x63\164\x69\157\156\40{$this->title}\50\51\x20\x7b\xd\12\x20\40\x20\x20\x20\40\40\x20\x72\145\164\x75\x72\x6e\x20\44\x74\x68\151\163\55\x3e{$this->method}\50{$JzDEm}\51\x3b\15\xa\40\40\40\x20\x7d\xd\xa\x7d"; goto k9h6k; k9h6k: } }
