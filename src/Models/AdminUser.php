<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.16  |
    |              on 2025-06-22 09:38:12              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
 namespace DagaSmart\BizAdmin\Models; use DagaSmart\BizAdmin\Admin; use Illuminate\Support\Facades\Schema; use Laravel\Sanctum\HasApiTokens; use Illuminate\Support\Collection; use Illuminate\Auth\Authenticatable; use Illuminate\Foundation\Auth\User; use Illuminate\Database\Eloquent\Casts\Attribute; use DagaSmart\BizAdmin\Traits\DatetimeFormatterTrait; use Illuminate\Contracts\Auth\Authenticatable as AuthenticatableContract; class AdminUser extends User implements AuthenticatableContract { use Authenticatable, HasApiTokens, DatetimeFormatterTrait; protected $appends = ["\141\144\155\x69\156\x69\163\164\162\141\x74\157\162"]; protected $guarded = []; public function __construct(array $F8xmb = []) { $this->setConnection(Admin::config("\x61\144\155\x69\x6e\x2e\144\x61\164\x61\x62\x61\163\x65\x2e\143\157\156\156\x65\x63\x74\x69\x6f\156")); parent::__construct($F8xmb); } public function roles() { return $this->belongsToMany(AdminRole::class, "\x61\144\x6d\151\156\x5f\x72\x6f\x6c\145\137\165\x73\145\x72\163", "\165\163\x65\162\137\x69\144", "\162\157\x6c\x65\137\x69\x64")->withTimestamps(); } public function avatar() : Attribute { $BwE06 = \Illuminate\Support\Facades\Storage::disk(Admin::config("\x61\144\155\x69\x6e\56\x75\160\154\157\141\144\x2e\x64\x69\x73\153")); return Attribute::make(get: fn($IyStN) => $IyStN ? admin_resource_full_path($IyStN) : url(Admin::config("\x61\x64\x6d\x69\156\x2e\144\x65\x66\x61\x75\x6c\x74\137\x61\x76\x61\x74\141\x72")), set: fn($IyStN) => str_replace($BwE06->url(''), '', $IyStN)); } protected static function boot() : void { parent::boot(); static::deleting(function (AdminUser $MWice) { $MWice->roles()->detach(); }); } public function allPermissions() : Collection { return $this->roles()->with("\160\x65\162\x6d\x69\163\163\151\157\x6e\163")->get()->pluck("\160\145\162\x6d\x69\163\x73\x69\x6f\156\x73")->flatten(); } public function can($Is78J, $xXi3P = []) : bool { goto imwvO; imwvO: if (!empty($Is78J)) { goto U4wZz; } goto sIT13; sIT13: return true; goto Hgr0c; aT728: return true; goto yAola; Hgr0c: U4wZz: goto nksP3; yAola: vsQM8: goto z5mzT; z5mzT: return $this->roles->pluck("\160\x65\x72\155\151\x73\163\x69\157\x6e\163")->flatten()->pluck("\163\x6c\165\x67")->contains($Is78J); goto RVe8e; nksP3: if (!$this->isAdministrator()) { goto vsQM8; } goto aT728; RVe8e: } public function isAdministrator() : bool { return $this->isRole(AdminRole::SuperAdministrator); } public function isDeveloper() : bool { return $this->isRole(AdminRole::SuperDeveloper); } public function isRole(string $k_7yP) : bool { return $this->roles->pluck("\163\x6c\165\x67")->contains($k_7yP); } public function inRoles(array $fu1uN = []) : bool { return $this->roles->pluck("\163\154\x75\x67")->intersect($fu1uN)->isNotEmpty(); } public function visible(array $fu1uN = []) : bool { goto Rt6dO; DuJj4: return true; goto l0Emt; ozKxY: return $this->inRoles($fu1uN); goto rBQto; Dz2RP: if (!empty($fu1uN)) { goto m8RGC; } goto yUmaB; yUmaB: return false; goto PouCt; l0Emt: pp6Ca: goto Dz2RP; Rt6dO: if (!$this->isAdministrator()) { goto pp6Ca; } goto DuJj4; y4gei: $fu1uN = array_column($fu1uN, "\163\x6c\165\x67"); goto ozKxY; PouCt: m8RGC: goto y4gei; rBQto: } public function administrator() : Attribute { return Attribute::get(fn() => $this->isAdministrator()); } }
